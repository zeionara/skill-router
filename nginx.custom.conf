worker_processes auto;

events {
    worker_connections  1024;
}

http {
    lua_package_path '/usr/local/openresty/lualib/?.lua;;';

    upstream 2scht {
        server 127.0.0.1:1217;
    }

    upstream creepy {
        server 127.0.0.1:1219;
    }

    server {
	listen 443 ssl;
        server_name zeio.ru;

	ssl_certificate /etc/letsencrypt/live/zeio.ru/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/zeio.ru/privkey.pem;

        location /app-connector {
	    set $target_backend "";

	    access_by_lua_block {
                ngx.req.read_body()
		local cjson = require "cjson"

		local body_data = ngx.req.get_body_data()
		if not body_data then
		    local file = ngx.req.get_body_file()
	            if file then
		        body_data = io.open(file, "rb"):read("*a")
		    end
		end

		if not body_data then
		    ngx.log(ngx.ERR, "No request body")
	            return ngx.exit(ngx.HTTP_BAD_REQUEST)
	        end

		local ok, data = pcall(cjson.decode, body_data)

		if not ok or not data.payload or not data.payload.app_info or not data.payload.app_info.projectId then
	            ngx.log(ngx.ERR, "Invalid JSON or missing projectId")
	            return ngx.exit(ngx.HTTP_BAD_REQUEST)
		end
		    
		if data.payload.app_info.projectId == "bc89278d-2467-4ada-ab4b-ef02e9d1f12d" then
		    ngx.var.target_backend = "2scht"
	        else
		    ngx.var.target_backend = "creepy"
	        end

		ngx.log(ngx.INFO, "Routing to backend: ", ngx.var.target_backend)
	    }

	    proxy_pass http://$target_backend/app-connector;

	    proxy_set_header Host $host;
	    proxy_set_header X-Real-IP $remote_addr;
	    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	    proxy_set_header X-Forwarded-Proto $scheme;
	}

        location / {
	    set $target_backend "";

	    access_by_lua_block {
                ngx.req.read_body()
		local cjson = require "cjson"

		local body_data = ngx.req.get_body_data()
		if not body_data then
		    local file = ngx.req.get_body_file()
	            if file then
		        body_data = io.open(file, "rb"):read("*a")
		    end
		end

		if not body_data then
		    ngx.log(ngx.ERR, "No request body")
	            return ngx.exit(ngx.HTTP_BAD_REQUEST)
	        end

		local ok, data = pcall(cjson.decode, body_data)

		if not ok or not data.session or not data.session.skill_id then
	            ngx.log(ngx.ERR, "Invalid JSON or missing skill_id")
	            return ngx.exit(ngx.HTTP_BAD_REQUEST)
		end

		if data.session.skill_id == "5271d935-4ded-4c21-b9d0-263f26e3c775" then
		    ngx.var.target_backend = "2scht"
		elseif data.session.skill_id == "15009c7f-b4b6-43de-a034-6de0a0339e4b" then
		    ngx.var.target_backend = "creepy"
		else
		    ngx.var.target_backend = "2scht"
	        end

		ngx.log(ngx.INFO, "Routing to backend: ", ngx.var.target_backend)
	    }

	    proxy_pass http://$target_backend;

	    proxy_set_header Host $host;
	    proxy_set_header X-Real-IP $remote_addr;
	    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	    proxy_set_header X-Forwarded-Proto $scheme;
	}
    }
}
